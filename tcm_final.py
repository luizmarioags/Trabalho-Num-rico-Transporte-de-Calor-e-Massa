# -*- coding: utf-8 -*-
"""TCM_Final.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/gist/luizmarioags/09b4b0ff6916af70d9a6b7bffa1b245d/tcm_final.ipynb
"""

import numpy as np
import matplotlib.pyplot as plt 
from numpy import pi as p 
from numpy import exp as e
import mpmath as mp
from mpmath import nsum, inf

#Exemplo Roteiro
# N é o número de intervalos de domínio
# k_final é o número de passos de tempo desejado para análise
# L é o tamanho da barra

N =10
k_final = [10,50,90,130]
k_final = np.array(k_final)
L = 1
x = np.linspace(0.0,L,N+1)
delta_x = L/N
delta_t = 0.2*(delta_x**2)
#Definindo a Matriz de temperatura
Temperatura = np.zeros(N+1, float)
Resultado = np.zeros(len(k_final),list)
Temperatura[N] = 1.0
Temperatura_Nova = np.copy(Temperatura)

for j in range(0, len(k_final)):
  for k in range(1, k_final[j] + 1):
    for i in range(1,N):
      Temperatura_Nova[i] = Temperatura[i] + (delta_t/(delta_x**2))*(Temperatura[i+1] - 2.0*Temperatura[i] + Temperatura[i - 1])
    Temperatura = np.copy(Temperatura_Nova)
  t = k*(delta_t)
  Resultado[j] = Temperatura

#Gráfico Pontilhado
fig = plt.figure()
ax = fig.add_subplot()
line_style = ['or','ob','og','ok']

for i in range(len(Resultado)):
  fig.suptitle('t = %.3f'%k_final[i], fontsize =18, fontweight = 'bold')

ax.set_ylabel('$T$', fontsize = 18)
ax.set_xlabel('$x$', fontsize = 18)

for i in range(len(Resultado)):
  plt.plot(x, Resultado[i],line_style[i], lw = 4)

plt.show()

#Gráfico continuo para um único passo
fig = plt.figure()
ax = fig.add_subplot()

fig.suptitle('t = %.3f'%t, fontsize =18, fontweight = 'bold')
ax.set_ylabel('$T$', fontsize = 18)
ax.set_xlabel('$x$', fontsize = 18)

plt.plot(x, Temperatura, '-r', lw = 4)
plt.show()

#Gráfico continuo para vários passos de tempo
fig = plt.figure()
ax = fig.add_subplot()
line_style = ['-r','-b','-g','-k']

for i in range(len(Resultado)):
  fig.suptitle('t = %.3f'%k_final[i], fontsize =18, fontweight = 'bold')

ax.set_ylabel('$T$', fontsize = 18)
ax.set_xlabel('$x$', fontsize = 18)

for i in range(len(Resultado)):
  plt.plot(x, Resultado[i],line_style[i], lw = 4)

plt.show()

#Gráfico Pontilhado sobreposto com o Contínuo para vários passos de tempo
fig = plt.figure()
ax = fig.add_subplot()
line_style = ['or','ob','og','ok']
line_continuos = ['-r','-b','-g','-k']

for i in range(len(Resultado)):
  fig.suptitle('t = %.3f'%k_final[i], fontsize =18, fontweight = 'bold')

ax.set_ylabel('$T$', fontsize = 18)
ax.set_xlabel('$x$', fontsize = 18)

for i in range(len(Resultado)):
  plt.plot(x, Resultado[i],line_style[i], lw = 4)
  plt.plot(x,Resultado[i], line_continuos[i])
plt.show()

#Exercício 1 e Exercício 4
N =100
L = 1
x = np.linspace(0.0,L,N+1)
delta_x = L/N
delta_t = 0.2*(delta_x**2)
k_final = [10,50,90,130]
#Definindo a Matriz de temperatura
Temperatura = np.zeros(N+1, float)
Resultado = np.zeros(len(k_final),list)
#Primeiro passo de tempo, pois temos que o primeiro elemento da nossa matriz de temperatura é igual a 1, isto é t = 0. 
#Nesse laço, para i dentro do range de 0 até N-1, que exclui o último ponto, indo sempre de 0 até N.
#Definimos toda a matriz de temperatura a partir da condição inicial, excluindo o último ponto do domínio, que é o final. 
#Equivalente a escrever o np.ones()
for i in range(0,N-1):
  Temperatura[i] = 1.0

Temperatura_Nova = np.copy(Temperatura)

for j in range(0, len(k_final)):
  for k in range(1, k_final[j] + 1):
    for i in range(1,N):
      Temperatura_Nova[i] = Temperatura[i] + (delta_t/(delta_x**2))\
                                          *(Temperatura[i+1] - 2.0*Temperatura[i] + Temperatura[i - 1])
      Temperatura = np.copy(Temperatura_Nova)
  t = k*(delta_t)
  print("Temperatura no tempo {}:{}".format(t,Temperatura))
  Resultado[j] = Temperatura

#Gráfico continuo para um único passo
fig = plt.figure()
ax = fig.add_subplot()

fig.suptitle('t = %.3f'%t, fontsize =18, fontweight = 'bold')
ax.set_ylabel('$T$', fontsize = 18)
ax.set_xlabel('$x$', fontsize = 18)

plt.plot(x, Temperatura, '-r', lw = 4)
plt.show()

#Gráfico Pontilhado
fig = plt.figure()
ax = fig.add_subplot()
line_style = ['or','ob','og','ok']

for i in range(len(Resultado)):
  fig.suptitle('t = %.3f'%k_final[i], fontsize =18, fontweight = 'bold')

ax.set_ylabel('$T$', fontsize = 18)
ax.set_xlabel('$x$', fontsize = 18)
for i in range(len(Resultado)):
  plt.plot(x, Resultado[i],line_style[i], lw = 4)

plt.show()

#Gráfico continuo para vários passos de tempo
fig = plt.figure()
ax = fig.add_subplot()
line_style = ['-r','-b','-g','-k']

for i in range(len(Resultado)):
  fig.suptitle('t = %.3f'%k_final[i], fontsize =18, fontweight = 'bold')

ax.set_ylabel('$T$', fontsize = 18)
ax.set_xlabel('$x$', fontsize = 18)

for i in range(len(Resultado)):
  plt.plot(x,Resultado[i],line_style[i], lw = 4)

plt.show()

#Gráfico pontilhado sobreposto com o continuo para vários passos
fig = plt.figure()
ax = fig.add_subplot()
line_style = ['or','ob','og','ok']
line_continuos = ['-r','-b','-g','-k']

for i in range(len(Resultado)):
  fig.suptitle('t = %.3f'%k_final[i], fontsize =18, fontweight = 'bold')

ax.set_ylabel('$T$', fontsize = 18)
ax.set_xlabel('$x$', fontsize = 18)

for i in range(len(Resultado)):
  plt.plot(x, Resultado[i],line_style[i], lw = 4)
  plt.plot(x,Resultado[i], line_continuos[i])
plt.show()

#Exercício 2 e Exercício 5
N =100
k_final = [10,50,90,130]
L = 1
x = np.linspace(0.0,L,N+1)
delta_x = L/N
delta_t = 0.2*(delta_x**2)
#Definindo a Matriz de temperatura
Temperatura = np.zeros(N+1, float)
Resultado = np.zeros(len(k_final),list)
#Aqui a temperatura no inicio do domínio, isto é, N = 0 é igual a 1, logo definimos a matriz de temperatura no ponto 0 como igual a 1
Temperatura[0] = 1.0
Temperatura_Nova = np.copy(Temperatura)
#O primeiro for salva os passos de tempo, já o segundo os contabiliza
for j in range(0, len(k_final)):
  for k in range(1, k_final[j] + 1):
    for i in range(1,N):
      Temperatura_Nova[i] = Temperatura[i] + (delta_t/(delta_x**2))*(Temperatura[i+1] - 2.0*Temperatura[i] + Temperatura[i - 1])
    Temperatura = np.copy(Temperatura_Nova)
  t = k*(delta_t)
  Resultado[j] = Temperatura
  print(Temperatura)

#Gráfico continuo para um único passo
fig = plt.figure()
ax = fig.add_subplot()

fig.suptitle('t = %.3f'%t, fontsize =18, fontweight = 'bold')
ax.set_ylabel('$T$', fontsize = 18)
ax.set_xlabel('$x$', fontsize = 18)

plt.plot(x, Temperatura, '-r', lw = 4)
plt.show()

#Gráfico continuo para vários passos de tempo
fig = plt.figure()
ax = fig.add_subplot()
line_style = ['-r','-b','-g','-k']

for i in range(len(Resultado)):
  fig.suptitle('t = %.3f'%k_final[i], fontsize =18, fontweight = 'bold')

ax.set_ylabel('$T$', fontsize = 18)
ax.set_xlabel('$x$', fontsize = 18)

for i in range(len(Resultado)):
  plt.plot(x,Resultado[i],line_style[i], lw = 4)

plt.show()

#Gráfico pontilhado para vários passos de tempo
fig = plt.figure()
ax = fig.add_subplot()
line_style = ['or','ob','og','ok']

for i in range(len(Resultado)):
  fig.suptitle('t = %.3f'%k_final[i], fontsize =18, fontweight = 'bold')
  
ax.set_ylabel('$T$', fontsize = 18)
ax.set_xlabel('$x$', fontsize = 18)

for i in range(len(Resultado)):
  plt.plot(x, Resultado[i],line_style[i], lw = 4)
  
plt.show()

#Gráfico Pontilhado sobreposto com o continuo para vários passos
fig = plt.figure()
ax = fig.add_subplot()
line_style = ['or','ob','og','ok']
line_continuos = ['-r','-b','-g','-k']

for i in range(len(Resultado)):
  fig.suptitle('t = %.3f'%k_final[i], fontsize =18, fontweight = 'bold')

ax.set_ylabel('$T$', fontsize = 18)
ax.set_xlabel('$x$', fontsize = 18)

for i in range(len(Resultado)):
  plt.plot(x, Resultado[i],line_style[i], lw = 4)
  plt.plot(x,Resultado[i], line_continuos[i])
plt.show()

#Exercício 3 
N =100
L = 2
x = np.linspace(0.0,L,N+1)
delta_x = L/N
delta_t = 0.2*(delta_x**2)
k_final = [10,50,90,130]
#Definindo a Matriz de temperatura
Temperatura = np.zeros(N+1, float)
Resultado = np.zeros(len(k_final),list)
#Primeiro passo de tempo, pois temos que o primeiro elemento da nossa matriz de temperatura é igual a 1, isto é t = 0. 
#Nesse laço, para i dentro do range de 0 até N-1, que exclui o último ponto, indo sempre de 0 até N.
#Definimos toda a matriz de temperatura a partir da condição inicial, excluindo o último ponto do domínio, que é o final. 
#Equivalente a escrever o np.ones()
for i in range(0,N-1):
  Temperatura[i] = np.sin((p/2)*x[i])
Temperatura_Nova = np.copy(Temperatura)

for j in range(0, len(k_final)):
  for k in range(1, k_final[j] + 1):
    for i in range(1,N):
      Temperatura_Nova[i] = Temperatura[i] + (delta_t/(delta_x**2))\
                                          *(Temperatura[i+1] - 2.0*Temperatura[i] + Temperatura[i - 1])
      Temperatura = np.copy(Temperatura_Nova)
  t = k*(delta_t)
  print("Temperatura no tempo {}:{}".format(t,Temperatura))
  Resultado[j] = Temperatura

#Gráfico continuo para um único passo
fig = plt.figure()
ax = fig.add_subplot()

fig.suptitle('t = %.3f'%t, fontsize =18, fontweight = 'bold')
ax.set_ylabel('$T$', fontsize = 18)
ax.set_xlabel('$x$', fontsize = 18)

plt.plot(x, Temperatura, '-r', lw = 4)
plt.show()

#Gráfico continuo para vários passos de tempo
fig = plt.figure()
ax = fig.add_subplot()
line_style = ['-r','-b','-g','-k']

for i in range(len(Resultado)):
  fig.suptitle('t = %.3f'%k_final[i], fontsize =18, fontweight = 'bold')

ax.set_ylabel('$T$', fontsize = 18)
ax.set_xlabel('$x$', fontsize = 18)

for i in range(len(Resultado)):
  plt.plot(x,Resultado[i],line_style[i], lw = 4)

plt.show()

#Gráfico Pontilhado para vários passos de tempo
fig = plt.figure()
ax = fig.add_subplot()
line_style = ['or','ob','og','ok']


for i in range(len(Resultado)):
  fig.suptitle('t = %.3f'%k_final[i], fontsize =18, fontweight = 'bold')

ax.set_ylabel('$T$', fontsize = 18)
ax.set_xlabel('$x$', fontsize = 18)

for i in range(len(Resultado)):
  plt.plot(x, Resultado[i],line_style[i], lw = 4)
plt.show()

#Gráfico Pontilhado sobreposto com o continuo para vários passos
fig = plt.figure()
ax = fig.add_subplot()
line_style = ['or','ob','og','ok']
line_continuos = ['-r','-b','-g','-k']

for i in range(len(Resultado)):
  fig.suptitle('t = %.3f'%k_final[i], fontsize =18, fontweight = 'bold')

ax.set_ylabel('$T$', fontsize = 18)
ax.set_xlabel('$x$', fontsize = 18)

for i in range(len(Resultado)):
  plt.plot(x, Resultado[i],line_style[i], lw = 4)
  plt.plot(x,Resultado[i], line_continuos[i])
plt.show()

#Resolução Análitica do Exercício 3
resultado_analitico = np.zeros([len(k_final),N])
funcao_analitica = lambda x, t: (e((-(p**2)*t)/4)*np.sin((p/2)*x))
for i in range(len(k_final)):
  for j in range(N):
    resultado_analitico[i][j] = funcao_analitica(x[j], k_final[i])

#Grafico da Resolução Analítica do Exercício 3
fig = plt.figure()
ax = fig.add_subplot()
line_style = ['-b']
for i in range(len(Resultado)):
  fig.suptitle('t = %.3f'%k_final[i], fontsize =18, fontweight = 'bold')

ax.set_ylabel('$T$', fontsize = 18)
ax.set_xlabel('$x$', fontsize = 18)

for i in range(len(Resultado)):
  plt.plot(x,Resultado[i],resultado_analitico[i][j],line_style[i], lw = 4)

plt.show()

#Resolução Análitica do Exercício 4
resultado_analitico = np.zeros([len(k_final),N])
funcao_analitica_exercicio4 = nsum(lambda n : (4/(((2 * n) - 1) * p)) *
                                      mp.sin(((2*n)- 1) * p * x)*
                                      mp.exp(-(((2*n)- 1) ** 2) * (p ** 2) * t),[1, inf])
for i in range(len(k_final)):
  for j in range(N):
    resultado_analitico[i][j] = funcao_analitica_exercicio4(x[j], k_final[i])

#Grafico da Resolução Analítica do Exercício 4
fig = plt.figure()
ax = fig.add_subplot()
line_style = ['-b']
for i in range(len(Resultado)):
  fig.suptitle('t = %.3f'%k_final[i], fontsize =18, fontweight = 'bold')

ax.set_ylabel('$T$', fontsize = 18)
ax.set_xlabel('$x$', fontsize = 18)

for i in range(len(Resultado)):
  plt.plot(x,Resultado[i],resultado_analitico[i][j],line_style[i], lw = 4)

plt.show()

#Solução Análitica do Exercício 5 
resultado_analitico = np.zeros([len(k_final),N])
funcao_analitica_exercicio5 = 1 - x - nsum(lambda n :(((2 /(n*p))*mp.sin(n*p*x)*mp.exp(-(n**2)*(p**2)*t))), [1, inf])
for i in range(len(k_final)):
  for j in range(N):
    resultado_analitico[i][j] = funcao_analitica_exercicio5(x[j], k_final[i])

#Grafico da Resolução Analítica do Exercício 5
fig = plt.figure()
ax = fig.add_subplot()
line_style = ['-b']
for i in range(len(Resultado)):
  fig.suptitle('t = %.3f'%k_final[i], fontsize =18, fontweight = 'bold')

ax.set_ylabel('$T$', fontsize = 18)
ax.set_xlabel('$x$', fontsize = 18)

for i in range(len(Resultado)):
  plt.plot(x,Resultado[i],resultado_analitico[i][j],line_style[i], lw = 4)

plt.show()